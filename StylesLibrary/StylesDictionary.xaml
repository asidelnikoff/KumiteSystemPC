<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="http://schemas.modernwpf.com/2019" 
                    xmlns:lang="clr-namespace:LanguageLibrary;assembly=LanguageLibrary"
                    xmlns:local="clr-namespace:StylesLibrary">
    <ResourceDictionary.MergedDictionaries>
        <ui:ThemeResources>
            <ui:ThemeResources.ThemeDictionaries>
                <ResourceDictionary x:Key="Light">
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="/ModernWpf;component/ThemeResources/Light.xaml" />
                        <ui:ColorPaletteResources Accent="#58C2C3" TargetTheme="Light"/>
                    </ResourceDictionary.MergedDictionaries>
                </ResourceDictionary>
            </ui:ThemeResources.ThemeDictionaries>
        </ui:ThemeResources>
        <ui:XamlControlsResources />
        <!-- Other merged dictionaries here -->
        <ResourceDictionary Source="pack://application:,,,/BusyIndicator;component/Theme/Default.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    

    <SolidColorBrush x:Key="LightGray" Color="#f1f1f1"/>
    <SolidColorBrush x:Key="AccentOrange" Color="#58C2C3"/>
    <SolidColorBrush x:Key="SecondaryOrange" Color="#5D8E8F"/>
    <SolidColorBrush x:Key="SecondaryOrangeSelect" Color="#dd5D8E8F"/>
    <SolidColorBrush x:Key="SecondaryOrangeClick" Color="#aa5D8E8F"/>
    <SolidColorBrush x:Key="RedBrush" Color="#c84b31"/>
    <SolidColorBrush x:Key="BlueBrush" Color="#2d4263"/>

    <Style TargetType="Label" x:Key="Header">
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="40,10"/>
    </Style>

    <Style TargetType="Button" x:Key="BaseButton">
        <Setter Property="Background" Value="#AA416C6D"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="ui:ControlHelper.CornerRadius" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                    Padding="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#dd356E6F"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#ee356E6F"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#acacac"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Button" x:Key="RedButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Background" Value="{DynamicResource RedBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                    Padding="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#ddc84b31"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#aac84b31"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="BlueButton" BasedOn="{StaticResource BaseButton}">
        <Setter Property="Background" Value="{DynamicResource BlueBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                    Padding="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#dd2d4263"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#aa2d4263"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="Button" x:Key="SecondaryButton" BasedOn="{StaticResource AccentButtonStyle}">
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Background" Value="{StaticResource SecondaryOrange}"/>
        <Setter Property="Foreground" Value="#FFF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ui:ControlHelper.CornerRadius" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                    Padding="5">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryOrangeSelect}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource SecondaryOrangeClick}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="AccentButton" BasedOn="{StaticResource AccentButtonStyle}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ui:ControlHelper.CornerRadius" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="AnimatedBorder" TargetType="Border">
        <Style.Triggers>
            <Trigger Property="IsEnabled"  Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                 From="0.0"
                                                 To="1.0"
                                                 Duration="0:0:0.7"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                 From="1.0"
                                                 To="0.0"
                                                 Duration="0:0:0.7"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AnimatedLabel" TargetType="Label">
        <Style.Triggers>
            <Trigger Property="IsEnabled"  Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard Name="WinnerAnimation">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                                                 AutoReverse="True"
                                                 RepeatBehavior="1.5x"
                                                               Duration="0:0:2">
                                <LinearDoubleKeyFrame KeyTime="0%" Value="1.0"/>
                                <LinearDoubleKeyFrame KeyTime="50%" Value="0.0"/>
                                <LinearDoubleKeyFrame KeyTime="100%" Value="1.0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                 To="1.0"
                                                 Duration="0:0:0.01"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <local:BoolToStringConverter x:Key="IsTimerRunningToText" FalseValue="{x:Static lang:Resources.Start}" 
                                 TrueValue="{x:Static lang:Resources.Stop}"/>
    <local:IsAtoshiBarakuToColorConverter x:Key="IsAtoshiBarakuToColorConverter" FalseValue="#191919" TrueValue="{StaticResource RedBrush}"/>
    <local:IsAtoshiBarakuToColorConverter x:Key="IsAtoshiBarakuToColorConverterWhite" FalseValue="White" TrueValue="{StaticResource RedBrush}"/>
    <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" FalseValue="Collapsed" TrueValue="Visible"/>
    <local:BoolToStringConverter x:Key="IsExternalBoardOpenedToText" FalseValue="{x:Static lang:Resources.ShowExternalBoard}" 
                                 TrueValue="{x:Static lang:Resources.CloseExternalBoard}"/>
    <local:BoolToStringConverter x:Key="IsExternalResultsBoardOpenedToText"
                                 FalseValue="{x:Static lang:Resources.ShowExternalResultsBoard}" 
                                 TrueValue="{x:Static lang:Resources.CloseExternalResultsBoard}"/>
    <local:BoolToStringConverter x:Key="IsExternalTimerBoardOpenedToText" FalseValue="{x:Static lang:Resources.ShowExt}" 
                                 TrueValue="{x:Static lang:Resources.CloseExt}"/>
</ResourceDictionary>